/*below is stuff that filaed to work as desired or inte hass of teh last was a found project that was really not worth the time to  learn*/
/* honeycomb code bleow tried and failed 
@mixin hex($width, $margin, $first-row) {
  $height: round($width / 1.73205080757);
  $second-row: (($first-row * 2) - 1) - $first-row;
  $group-count: $first-row + $second-row;
  margin: (($height / 4) + $margin) $margin;
  width: $width;
  height: $height;
 */ /*
  &:nth-child(#{$group-count}n-#{$group-count - 1}) {
    margin-left: 0;
  }

  &:nth-child(#{$group-count}n-#{$second-row}) {
    margin-right: 0;
  }

  &:nth-child(#{$group-count}n-#{$second-row - 1}) {
    margin-left: ($width / 2) + $margin;
  }

  .hex {
    background-size: auto round($height * 2);
  }

  .hex-1:before,
  .hex-2:before {
    height: round($height * 2);
    width: round($height * 2);
  }

  .hex-1:before {
    transform: rotate(-60deg) translate(-$height, 0);
  }

  .hex-2:before {
    transform: rotate(60deg)
      translate(round($height / 2.75), round($height / 2.75));
  }
}

.hex-container {
  min-width: 320px;
  margin: 0 auto;

  @media screen and (min-width: 300px) {
    width: 300px;
  }
  @media screen and (min-width: 400px) {
    width: 400px;
  }
  @media screen and (min-width: 500px) {
    width: 500px;
  }

  @media screen and (min-width: 768px) {
    width: 768px;
  }

  @media screen and (min-width: 960px) {
    width: 960px;
  }

  @media screen and (min-width: 1200px) {
    width: 1200px;
  }
}

.hex-cards {
  margin: 5px auto;
  padding: 40px 0;
  width: 320px;
  list-style: none;
  font-size: 0;
  overflow: hidden;

  @media screen and (min-width: 300px) {
    width: auto;
  }
  @media screen and (min-width: 400px) {
    width: auto;
  }
  @media screen and (min-width: 500px) {
    width: auto;
  }
}

.hex-card {
  position: relative;
  display: inline-block;
  z-index: 1;
  @media (max-width: 320px) and (max-width: 399px) {
    @include hex(43px, 1px, 3);
    font-size: 4px;
  }

  @media (max-width: 499px) {
    @include hex(86px, 3px, 3);
    font-size: 10px;
  }

  @media (min-width: 500px) and (max-width: 767px) {
    @include hex(92px, 4px, 3);
    font-size: 10px;
  }

  @media (min-width: 768px) and (max-width: 959px) {
    @include hex(118px, 4px, 4);
    font-size: 12px;
  }

  @media (min-width: 960px) and (max-width: 1199px) {
    @include hex(150px, 6px, 5);
    font-size: 14px;
  }

  @media (min-width: 1200px) {
    @include hex(180px, 12px, 5);
    font-size: 18px;
  }
}

.hex {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  display: block;
  cursor: pointer;
  background-position: 50% 50%;
  backface-visibility: hidden;
}

.hex-1,
.hex-2 {
  position: absolute;
  display: block;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  background: inherit;
  overflow: hidden;
  backface-visibility: hidden;

  &:before {
    position: absolute;
    left: 0;
    content: "";
    background: inherit;
  }
}

.hex-1 {
  transform: rotate(60deg);
  z-index: -1;

  &:before {
    top: 0;
    transform-origin: 0 0;
  }
}

.hex-2 {
  transform: rotate(-60deg);
  z-index: -2;

  &:before {
    bottom: 0;
  }
}

.hex-overlay {
  opacity: 0;
  transition: all 0.3s ease;
  background: #333;
  z-index: 99;

  &:hover {
    opacity: 0.9;
    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.4), 0 6px 20px 0 rgba(0, 0, 0, 0.3);
  }
}
.hexbg {
  background-color: $primary;
}
li.hex-card:nth-child(odd) div.hexbg {
  background-color: #01579b;
}
.hex-content {
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  font-family: Arial, sans-serif;
  color: #fff;
  height: 100%;
  font-weight: bold;
}

this has jquery found codepen all code under neath didn't go
with this cause jquery  and css seeemed verbose and highly complicated to customize 
 Hexagon specific code
  <script>
        (function($) {
          $.fn.honeycombs = function(options) {
            // Establish our default settings
            var settings = $.extend(
              {
                combWidth: 180,
                margin: 20
              },
              options
            );

            function initialise(element) {
              var width = 0;
              var combWidth = 0;
              var combHeight = 0;
              var num = 0;
              var $wrapper = null;

              console.log(element);

              
               * Build the dom
               
              function buildHtml() {
                // add the 2 other boxes
                $wrapper = $(element).find(".honeycombs-inner-wrapper");
                num = 0;

                $(element)
                  .find(".comb")
                  .each(function() {
                    num = num + 1;

                    if ($(this).find("span.comb-title").length > 0) {
                      $(this)
                        .find(".inner_span .inner-text-title")
                        .html(
                          $(this)
                            .find("span.comb-title")
                            .html()
                        );
                    }

                    if (
                      $(this).find("span.comb-description-short").length > 0
                    ) {
                      $(this)
                        .find(".inner_span .inner-text-description-short")
                        .html(
                          $(this)
                            .find("span.comb-description-short")
                            .html()
                        );
                    }
                  });
              }

              
               * Update all scale values
              
              function updateScales() {
                combWidth = settings.combWidth;
                combHeight = (Math.sqrt(3) * combWidth) / 2;
                edgeWidth = combWidth / 2;

                $(element)
                  .find(".comb")
                  .width(combWidth)
                  .height(combHeight);
                $(element)
                  .find(".hex_l, .hex_r")
                  .width(combWidth)
                  .height(combHeight);
                $(element)
                  .find(".hex_inner")
                  .width(combWidth)
                  .height(combHeight);
              }

              
               * update css classes
               
              function reorder(animate) {
                updateScales();
                width = $(element).width();

                newWidth = (num / 1.5) * settings.combWidth;

                if (newWidth < width) {
                  width = newWidth;
                }

                $wrapper.width(width);

                var row = 0; // current row
                var upDown = 1; // 1 is down
                var left = 0; // pos left
                var top = 0; // pos top
                var cols = 0;

                $(element)
                  .find(".comb")
                  .each(function(index) {
                    top =
                      row * (combHeight + settings.margin) +
                      upDown * (combHeight / 2 + settings.margin / 2);

                    if (animate === true) {
                      $(this).stop(true, false);
                      $(this).animate({
                        left: left,
                        top: top
                      });
                    } else {
                      $(this)
                        .css("left", left)
                        .css("top", top);
                    }

                    left = left + (combWidth - combWidth / 4 + settings.margin);
                    upDown = (upDown + 1) % 2;

                    if (row === 0) {
                      cols = cols + 1;
                    }

                    if (left + combWidth > width) {
                      left = 0;
                      row = row + 1;
                      upDown = 1;
                    }
                  });

                $wrapper
                  .width(
                    cols * ((combWidth / 4) * 3 + settings.margin) +
                      combWidth / 4
                  )
                  .innerHeight(
                    (row + 1) * (combHeight + settings.margin) + combHeight / 2
                  );
              }

              function getTopInfoBlock(el) {
                return $(el).css("top");
              }

              /*
               * Return the left value as a number without the string 'px'
               
              function getLeftInfoBlock(el) {
                return parseInt(
                  $(el)
                    .css("left")
                    .slice(0, -2),
                  10
                );
              }

              function calculateTopInfoBlock(top) {
                return "calc(155px + " + top + ")";
              }

              function setLeftInfoBlock(el, target) {
                var $infoBlock = $(el).find(".inner-text-description-long");
                var combWidth = parseInt(target.width(), 10);
                var infoBlockWidth = parseInt($infoBlock.width(), 10);
                var leftCalculated =
                  getLeftInfoBlock(target) -
                  infoBlockWidth / 2 +
                  combWidth / 2 +
                  "px";

                $infoBlock.css("left", leftCalculated);
              }

              function setTopInfoBlock(el, target) {
                $(el)
                  .find(".inner-text-description-long")
                  .css("top", calculateTopInfoBlock(getTopInfoBlock(target)));
              }

              // Show info block with long description
              function setCurrElementActive(el) {
                $(el)
                  .find(".inner-text-description-long")
                  .addClass("active");
              }

              /*
               * Check if the currently active info block has a negative left position
               *
               
              function CheckInfoBlockOutsideViewport(el) {
                var $infoBlock = $(el).find(".inner-text-description-long");
                var left = getLeftInfoBlock($infoBlock);

                // Get the left position of the parent relative to the document
                var $parentLeft = $(el)
                  .parent()
                  .offset().left;

                // Determine the position of the right side of the bouding box of the Info Block
                var right = Math.round(
                  $parentLeft + left + $infoBlock.outerWidth()
                );
                var $viewport = $(window).width();

                if (left < 0) {
                  $infoBlock.css("left", "0");
                }

                // Check if the info block is outisde the viewport
                if (right > $viewport) {
                  var delta = right - $viewport;
                  $infoBlock.css("left", left - delta - 10 + "px");
                }
              }

              // Remove all classes '.active'
              function removeActiveElements() {
                $(".comb-container .active").each(function() {
                  $(this).removeClass("active");
                });
              }

              function clickInfoBlockHandler(event) {
                event.preventDefault();

                var comb = $(this).find(".comb");
                var $dataLink = $(this)
                  .find(".inner-text-description-long")
                  .attr("data-link");

                // If long description is empty and data-link attribute is available, then follow the link directly
                if (!$dataLink) {
                  setLeftInfoBlock(".comb-container", comb);
                  CheckInfoBlockOutsideViewport(".comb-container");
                  setTopInfoBlock(".comb-container", comb);
                  removeActiveElements();
                  setCurrElementActive(event.currentTarget);
                } else {
                  window.location = $dataLink;
                }
              }

              function closeBtnHandler(event) {
                event.stopImmediatePropagation();
                $(this)
                  .closest(".active")
                  .removeClass("active");
              }

              function infoBlockReadMoreHandler(event) {
                var $link = $(event.target).attr("href");
                window.location = $link;
              }

              function addEvents() {
                $(".honeycombs").on(
                  "click",
                  ".comb-container",
                  clickInfoBlockHandler
                );
                $(".close").on("click", closeBtnHandler);

                // TOFIX: don't let javascript hijack the click event, but that it can be opened in a new tab with keyboard/mouse
                $(".inner-text-description-long").on(
                  "click",
                  "a",
                  infoBlockReadMoreHandler
                );
              }

               When the honeycomb is used in a tab interface, as used on the /uitdaging about pages,
               * the honeycomb needs to be initialized to calculate the css to position the honeycombs.
               
              function reInitializeInTab() {
                // Assuming parent is .container and the next parent is #about
                if (
                  $(".honeycombs")
                    .closest(".container")
                    .parent()
                    .attr("id") === "about"
                ) {
                  $(".challenge_menu a").on("click", function(event) {
                    reorder(false);
                  });
                }
              }

              $(window).resize(function() {
                reorder(true);
              });

              buildHtml();
              reorder(false);
              addEvents();
              reInitializeInTab();
            }

            return this.each(function() {
              console.log("test in each function");
              initialise(this);
            });
          };
        })(jQuery);

        jQuery(document).ready(function($) {
          $(".honeycombs").honeycombs();
        });
      </script>

      .honeycombs {
        position: relative;
        width: 100%;
        text-align: center;
        margin-bottom: 48px;
      }
      li.comb:nth-child(odd) div.hexbg {
        background-color: #01579b;
      }
      .honeycombs .inner_span {
        display: block;
        height: 100%;
        width: 100%;
        background-color: #ee0013;
        color: #fff;
      }

      .honeycombs .honeycombs-inner-wrapper {
        display: inline-block;
        width: 700px;
        position: relative;
      }

      .honeycombs .hex_l,
      .honeycombs .hex_r {
        overflow: hidden;
        position: absolute;
      }

      .honeycombs .hex_l {
        -ms-transform: rotate(60deg);
        transform: rotate(60deg);
      }

      .honeycombs .hex_r {
        -ms-transform: rotate(-120deg);
        transform: rotate(-120deg);
      }

      .honeycombs .hex_inner {
        display: block;
        visibility: visible;
        -ms-transform: rotate(60deg);
        transform: rotate(60deg);
        cursor: pointer;
      }

      .comb-container .inner-text-description-long {
        display: none;
        text-align: left;
        background-color: #fcfcfc;
        color: #333;
        line-height: 1.5;
        margin: 0;
        padding: 36px 24px 24px;
        max-width: 310px;
        position: absolute;
        z-index: 9;
      }

      @media (min-width: 700px) {
        .comb-container .inner-text-description-long {
          width: 310px;
        }
      }

      .comb-container .inner-text-description-long p {
        font-size: 1rem;
      }

      .comb-container .inner-text-description-long p:last-of-type {
        margin-bottom: 1rem;
      }

      .comb-container .inner-text-description-long.active {
        display: block;
      }

      .comb-container .inner-text-description-short.valign {
        display: table-cell;
        vertical-align: middle;
        padding: 14px;
      }

      .comb {
        position: absolute;
        display: inline-block;
      }

      .comb .inner-text-description-long,
      .comb .inner-text-description-short,
      .comb .inner-text-title {
        display: block;
        max-width: 78%;
        text-align: center;
        margin: 0 auto;
      }

      .comb .inner-text-title {
        font-weight: 700;
        font-size: 2.3rem;
        line-height: 1;
        margin-bottom: 1rem;
      }

      .comb .comb-description-long,
      .comb .comb-description-short,
      .comb .comb-title {
        display: none;
      }

      .comb .inner-text-description-long,
      .comb .inner-text-description-short {
        font-weight: 400;
        line-height: 1.3;
      }

      .comb:hover .inner_span {
        background-color: #700000;
      }

      .comb.disabled .inner_span {
        background-color: #cdcccc;
      }

      .comb.row1 .inner_span {
        background-color: #06393f;
      }

      .comb.row1:hover .inner_span {
        background-color: #020f10;
      }

      .comb.row2 .inner_span {
        background-color: #1f1f70;
      }

      .comb.row2:hover .inner_span {
        background-color: #023036;
      }

      .comb.row3 .inner_span {
        background-color: #0093a4;
      }
      
      .comb.row3:hover .inner_span {
        background-color: #006571;
      }

      .comb.row4 .inner_span {
        background-color: #008c9e;
      }

      .comb.row5 .inner_span {
        background-color: #6fcbdb;
      } 

      .comb .inner_span {
        display: table;
        display: -ms-flexbox;
        display: flex;
        -ms-flex-direction: column;
        flex-direction: column;
        -ms-flex-pack: center;
        justify-content: center;
      }

      .inner-text-description-long + .comb.disabled {
        pointer-events: none;
      }

      .close {
        position: absolute;
        top: 12px;
        top: 0.75rem;
        right: 12px;
        right: 0.75rem;
        opacity: 1;
        -webkit-appearance: none;
        padding: 0;
        cursor: pointer;
        background: 0 0;
        border: 0;
        font-size: 1.325rem;
        font-weight: 700;
        line-height: 1;
        color: #555;
        text-shadow: 0 1px 0 #fff;
      }

      .close:hover {
        color: #9e9e9e;
      }
*/
